name: Build and Release Static Nginx

on:
  schedule:
    - cron: '0 */2 * * *'  # 每隔2小时运行一次
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  check-versions:
    runs-on: ubuntu-latest

    outputs:
      should_run_build: ${{ env.SHOULD_RUN_BUILD }}
      NGINX_VERSION: ${{ env.NGINX_VERSION }}
      OPENSSL_VERSION: ${{ env.OPENSSL_VERSION }}
      JEMALLOC_VERSION: ${{ env.JEMALLOC_VERSION }}
      PCRE_VERSION: ${{ env.PCRE_VERSION }}
      ZLIB_VERSION: ${{ env.ZLIB_VERSION }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq wget

    - name: Get current versions
      id: get_current_versions
      run: |
        get_current_versions_all=$(curl -s https://raw.githubusercontent.com/hello-yunshu/Xray_bash_onekey_api/refs/heads/main/xray_shell_versions.json)
        nginx_online_version=$(echo "$get_current_versions_all" | jq -r '.nginx_online_version')
        openssl_online_version=$(echo "$get_current_versions_all" | jq -r '.openssl_online_version')
        jemalloc_online_version=$(echo "$get_current_versions_all" | jq -r '.jemalloc_online_version')
        latest_pcre2=$(curl -s https://api.github.com/repos/PCRE2Project/pcre2/releases/latest | jq -r '.tag_name' | sed 's/^pcre2-//')
        latest_zlib=$(curl -s https://zlib.net/ | grep -oP 'zlib-\K[\d\.]+(?=\.tar\.gz)' | sort -V | tail -1)
        # Check if any of the versions are empty
        if [ -z "$nginx_online_version" ] || [ -z "$openssl_online_version" ] || [ -z "$jemalloc_online_version" ] || [ -z "$latest_pcre2" ] || [ -z "$latest_zlib" ]; then
          echo "Error: One or more current versions are empty."
          exit 1
        fi
        echo "NGINX_VERSION=$nginx_online_version" >> $GITHUB_ENV
        echo "OPENSSL_VERSION=$openssl_online_version" >> $GITHUB_ENV
        echo "JEMALLOC_VERSION=$jemalloc_online_version" >> $GITHUB_ENV
        echo "PCRE_VERSION=$latest_pcre2" >> $GITHUB_ENV
        echo "ZLIB_VERSION=$latest_zlib" >> $GITHUB_ENV
        echo "$get_current_versions_all" > .github/current_versions.json

    - name: Read previous versions from file
      id: read_previous_versions
      run: |
        if [ -f .github/previous_versions.json ]; then
          previous_versions=$(cat .github/previous_versions.json)
        else
          echo "No previous versions found."
          previous_versions='{}'
        fi
        previous_nginx_version=$(echo "$previous_versions" | jq -rc '.nginx_online_version // ""')
        previous_openssl_version=$(echo "$previous_versions" | jq -rc '.openssl_online_version // ""')
        previous_jemalloc_version=$(echo "$previous_versions" | jq -rc '.jemalloc_online_version // ""')
        # Check if any of the previous versions are empty
        if [ -z "$previous_nginx_version" ] && [ -n "$previous_versions" ] || \
           [ -z "$previous_openssl_version" ] && [ -n "$previous_versions" ] || \
           [ -z "$previous_jemalloc_version" ] && [ -n "$previous_versions" ]; then
          echo "Error: One or more previous versions are empty."
          exit 1
        fi
        echo "PREVIOUS_NGINX_VERSION=$previous_nginx_version" >> $GITHUB_ENV
        echo "PREVIOUS_OPENSSL_VERSION=$previous_openssl_version" >> $GITHUB_ENV
        echo "PREVIOUS_JEMALLOC_VERSION=$previous_jemalloc_version" >> $GITHUB_ENV

    - name: Compare versions
      id: compare_versions
      run: |
        nginx_changed=false
        openssl_changed=false
        jemalloc_changed=false

        current_nginx_version=${{ env.NGINX_VERSION }}
        previous_nginx_version=${{ env.PREVIOUS_NGINX_VERSION }}

        current_openssl_version=${{ env.OPENSSL_VERSION }}
        previous_openssl_version=${{ env.PREVIOUS_OPENSSL_VERSION }}

        current_jemalloc_version=${{ env.JEMALLOC_VERSION }}
        previous_jemalloc_version=${{ env.PREVIOUS_JEMALLOC_VERSION }}

        current_pcre_version=${{ env.PCRE_VERSION }}
        current_zlib_version=${{ env.ZLIB_VERSION }}

        echo "Current Nginx Version: $current_nginx_version"
        echo "Previous Nginx Version: $previous_nginx_version"
        echo "Current OpenSSL Version: $current_openssl_version"
        echo "Previous OpenSSL Version: $previous_openssl_version"
        echo "Current Jemalloc Version: $current_jemalloc_version"
        echo "Previous Jemalloc Version: $previous_jemalloc_version"
        echo "Current PCRE Version: $current_pcre_version"
        echo "Current Zlib Version: $current_zlib_version"

        if [ "$current_nginx_version" != "$previous_nginx_version" ]; then
          echo "Nginx version changed from $previous_nginx_version to $current_nginx_version"
          nginx_changed=true
        fi

        if [ "$current_openssl_version" != "$previous_openssl_version" ]; then
          echo "OpenSSL version changed from $previous_openssl_version to $current_openssl_version"
          openssl_changed=true
        fi

        if [ "$current_jemalloc_version" != "$previous_jemalloc_version" ]; then
          echo "Jemalloc version changed from $previous_jemalloc_version to $current_jemalloc_version"
          jemalloc_changed=true
        fi

        trigger_build=false

        if $nginx_changed || $openssl_changed || $jemalloc_changed; then
          echo "Versions have changed, triggering build."
          trigger_build=true
        elif [ "$previous_versions" == '{}' ]; then
          echo "No previous versions found, triggering build."
          trigger_build=true
        else
          echo "No version changes detected."
        fi

        echo "SHOULD_RUN_BUILD=$trigger_build" >> $GITHUB_ENV

    - name: Update previous versions with current versions
      run: |
        cp .github/current_versions.json .github/previous_versions.json

    - name: Commit and push updated previous_versions.json
      if: always()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .github/previous_versions.json
        git commit -m "Update previous_versions.json with latest versions" || true
        git push origin main || true

  build:
    needs: check-versions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x86
          - os: ubuntu-22.04-arm
            arch: arm
    if: ${{ needs.check-versions.outputs.should_run_build == 'true' || github.event_name == 'workflow_dispatch' }}
    
    outputs:
      BUILD_TIME: ${{ env.BUILD_TIME }}
      BUILD_IMAGE: ${{ env.BUILD_IMAGE }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Set environment variables
      run: |
        export NGINX_VERSION="${{ needs.check-versions.outputs.NGINX_VERSION }}"
        export OPENSSL_VERSION="${{ needs.check-versions.outputs.OPENSSL_VERSION }}"
        export JEMALLOC_VERSION="${{ needs.check-versions.outputs.JEMALLOC_VERSION }}"
        export PCRE_VERSION="${{ needs.check-versions.outputs.PCRE_VERSION }}"
        export ZLIB_VERSION="${{ needs.check-versions.outputs.ZLIB_VERSION }}"
        echo "NGINX_VERSION=$NGINX_VERSION" >> $GITHUB_ENV
        echo "OPENSSL_VERSION=$OPENSSL_VERSION" >> $GITHUB_ENV
        echo "JEMALLOC_VERSION=$JEMALLOC_VERSION" >> $GITHUB_ENV
        echo "PCRE_VERSION=$PCRE_VERSION" >> $GITHUB_ENV
        echo "ZLIB_VERSION=$ZLIB_VERSION" >> $GITHUB_ENV
        echo "BUILD_TIME=$(date '+%Y-%m-%d %H:%M')" >> $GITHUB_ENV
        echo "BUILD_IMAGE=$(lsb_release -d | cut -f2-)" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install -y build-essential wget curl tar gzip bzip2 xz-utils libtool autoconf automake pkg-config libcrypt-dev
        sudo apt-get install -y musl-tools

    - name: Cache OpenSSL
      id: cache-openssl
      uses: actions/cache@v4
      with:
        path: |
          ./openssl-${{ env.OPENSSL_VERSION }}/
        key: ${{ runner.os }}-openssl-downloaded-${{ matrix.arch }}-${{ env.OPENSSL_VERSION }}

    - name: Download OpenSSL
      if: steps.cache-openssl.outputs.cache-hit != 'true'
      run: |
        wget -nc --no-check-certificate https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
        tar -zxvf openssl-${{ env.OPENSSL_VERSION }}.tar.gz

    - name: Check OpenSSL download
      if: steps.cache-openssl.outputs.cache-hit != 'true'
      run: |
        ls -la ./openssl-${{ env.OPENSSL_VERSION }}/
        if [ ! -d "./openssl-${{ env.OPENSSL_VERSION }}/" ]; then
          echo "OpenSSL download failed!"
          exit 1
        fi

    - name: Cache Jemalloc
      id: cache-jemalloc
      uses: actions/cache@v4
      with:
        path: |
          ./jemalloc-${{ env.JEMALLOC_VERSION }}/
        key: ${{ runner.os }}-jemalloc-downloaded-${{ matrix.arch }}-${{ env.JEMALLOC_VERSION }}

    - name: Download and extract Jemalloc
      if: steps.cache-jemalloc.outputs.cache-hit != 'true'
      run: |
        wget -nc --no-check-certificate https://github.com/jemalloc/jemalloc/releases/download/${{ env.JEMALLOC_VERSION }}/jemalloc-${{ env.JEMALLOC_VERSION }}.tar.bz2
        tar -xvf jemalloc-${{ env.JEMALLOC_VERSION }}.tar.bz2

    - name: Build and install Jemalloc
      run: |
        cd jemalloc-${{ env.JEMALLOC_VERSION }}
        # export CC=musl-gcc
        ./configure --enable-static --disable-shared --prefix=/opt/jemalloc CFLAGS="-O3"
        make -j$(($(nproc) + 1))
        sudo make install

    - name: Check Jemalloc installation
      run: |
        ls -la /opt/jemalloc/
        if [ ! -d "/opt/jemalloc/" ]; then
          echo "Jemalloc installation failed!"
          exit 1
        fi

    - name: Cache PCRE2
      id: cache-pcre2
      uses: actions/cache@v4
      with:
        path: |
          ./pcre2-${{ env.PCRE_VERSION }}/
        key: ${{ runner.os }}-pcre2-downloaded-${{ matrix.arch }}-${{ env.PCRE_VERSION }}

    - name: Download PCRE2
      if: steps.cache-pcre2.outputs.cache-hit != 'true'
      run: |
        wget -nc https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${{ env.PCRE_VERSION }}/pcre2-${{ env.PCRE_VERSION }}.tar.gz
        tar -xf pcre2-${{ env.PCRE_VERSION }}.tar.gz

    - name: Build and install PCRE2
      run: |
        cd pcre2-${{ env.PCRE_VERSION }}
        ./configure --prefix=/opt/pcre --enable-static --disable-shared CFLAGS="-O3"
        make -j$(($(nproc) + 1))
        sudo make install

    - name: Check PCRE2 installation
      run: |
        ls -la /opt/pcre/
        if [ ! -d "/opt/pcre/" ]; then
          echo "PCRE2 installation failed!"
          exit 1
        fi

    - name: Cache zlib
      id: cache-zlib
      uses: actions/cache@v4
      with:
        path: |
          ./zlib-${{ env.ZLIB_VERSION }}/
        key: ${{ runner.os }}-zlib-downloaded-${{ matrix.arch }}-${{ env.ZLIB_VERSION }}

    - name: Download zlib
      if: steps.cache-zlib.outputs.cache-hit != 'true'
      run: |
        wget -nc https://zlib.net/zlib-${{ env.ZLIB_VERSION }}.tar.gz
        tar -xf zlib-${{ env.ZLIB_VERSION }}.tar.gz

    - name: Build and install zlib
      run: |
        cd zlib-${{ env.ZLIB_VERSION }}
        export CFLAGS="-O3"
        ./configure --prefix=/opt/zlib --static
        make -j$(($(nproc) + 1))
        sudo make install

    - name: Check zlib installation
      run: |
        ls -la /opt/zlib/
        if [ ! -d "/opt/zlib/" ]; then
          echo "zlib installation failed!"
          exit 1
        fi

    - name: Cache Nginx
      id: cache-nginx
      uses: actions/cache@v4
      with:
        path: |
          ./nginx-${{ env.NGINX_VERSION }}/
        key: ${{ runner.os }}-nginx-downloaded-${{ matrix.arch }}-${{ env.NGINX_VERSION }}

    - name: Download Nginx
      if: steps.cache-nginx.outputs.cache-hit != 'true'
      run: |
        wget -nc --no-check-certificate http://nginx.org/download/nginx-${{ env.NGINX_VERSION }}.tar.gz
        tar -zxvf nginx-${{ env.NGINX_VERSION }}.tar.gz

    - name: Check Nginx download
      if: steps.cache-nginx.outputs.cache-hit != 'true'
      run: |
        ls -la ./nginx-${{ env.NGINX_VERSION }}/
        if [ ! -d "./nginx-${{ env.NGINX_VERSION }}/" ]; then
          echo "Nginx download failed!"
          exit 1
        fi

    - name: Extract Nginx
      run: |
        cd nginx-${{ env.NGINX_VERSION }}
        # export CC=musl-gcc
        ./configure --prefix=/usr/local/nginx \
          --user=nobody \
          --group=nogroup \
          --with-http_ssl_module \
          --with-http_gzip_static_module \
          --with-http_stub_status_module \
          --with-http_realip_module \
          --with-http_secure_link_module \
          --with-http_slice_module \
          --with-stream \
          --with-stream_ssl_module \
          --with-stream_realip_module \
          --with-stream_ssl_preread_module \
          --with-http_sub_module \
          --with-http_v2_module \
          --with-http_v3_module \
          --with-cc-opt='-O3 -static-libgcc -fPIC' \
          --with-ld-opt="-L/opt/jemalloc/lib -L/opt/zlib/lib -L/opt/pcre/lib \
                        -Wl,--start-group -Wl,-Bstatic -ljemalloc -lz -lpcre -lcrypt \
                        -Wl,-Bdynamic -Wl,--end-group -lpthread -ldl" \
          --with-openssl="$(pwd)/../openssl-${{ env.OPENSSL_VERSION }}" \
          --with-openssl-opt='no-shared no-dso no-hw no-engine'

        make -j$(($(nproc) + 1))
        sudo make install

    - name: Check Nginx installation
      if: steps.cache-nginx.outputs.cache-hit != 'true'
      run: |
        ls -la /usr/local/nginx/
        if [ ! -d "/usr/local/nginx/" ]; then
          echo "Nginx installation failed!"
          exit 1
        fi

    - name: Verify Nginx installation
      run: |
        set -x
        nginx_binary="/usr/local/nginx/sbin/nginx"
        nginx_v_output=$($nginx_binary -V 2>&1)
        echo "$nginx_v_output"

        # 使用 file 判断是否是静态编译
        file_output=$(file "$nginx_binary")
        echo "$file_output"

        if echo "$file_output" | grep -qi "statically linked"; then
            echo "✅ Nginx is statically compiled. Verification succeeded."
        else
            # 如果不是静态编译，再尝试 ldd 和 GLIBC 检查
            ldd_output=$(ldd "$nginx_binary" 2>/dev/null)
            echo "$ldd_output"

            if echo "$ldd_output" | grep -q "lib"; then
                objdump_output=$(objdump -p "$nginx_binary" | grep GLIBC)
                if [ -n "$objdump_output" ]; then
                    echo "✅ Nginx dynamic dependencies check succeeded."
                else
                    echo "❌ Nginx verification failed: No GLIBC dependencies found in dynamic build."
                    exit 1
                fi
            else
                echo "❌ Nginx verification failed: Unknown or unexpected dynamic link format."
                exit 1
            fi
        fi

    - name: Create package directory
      run: |
        mkdir -p package/nginx

    - name: Copy Nginx installation to package directory
      run: |
        cp -r /usr/local/nginx/* package/nginx/

    - name: Create tarball
      run: |
        cd package
        tar -czvf ../xray-nginx-custom-${{ matrix.arch }}.tar.gz nginx/
        cd ..

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: xray-nginx-custom-${{ matrix.arch }}.tar.gz
        path: xray-nginx-custom-${{ matrix.arch }}.tar.gz

  upload-release-assets:
    needs: [check-versions, build]
    runs-on: ubuntu-latest
    steps:
    - name: Set environment variables
      run: |
        export NGINX_VERSION="${{ needs.check-versions.outputs.NGINX_VERSION }}"
        export OPENSSL_VERSION="${{ needs.check-versions.outputs.OPENSSL_VERSION }}"
        export JEMALLOC_VERSION="${{ needs.check-versions.outputs.JEMALLOC_VERSION }}"
        export BUILD_TIME="${{ needs.build.outputs.BUILD_TIME }}"
        export BUILD_IMAGE="${{ needs.build.outputs.BUILD_IMAGE }}"
        echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
        echo "BUILD_IMAGE=$BUILD_IMAGE" >> $GITHUB_ENV
        echo "NGINX_VERSION=$NGINX_VERSION" >> $GITHUB_ENV
        echo "OPENSSL_VERSION=$OPENSSL_VERSION" >> $GITHUB_ENV
        echo "JEMALLOC_VERSION=$JEMALLOC_VERSION" >> $GITHUB_ENV

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with: 
        path: artifacts
        pattern: "*.tar.gz"
        merge-multiple: true

    - name: Generate tag name
      id: generate_tag
      run: |
        echo "TAG_NAME=v$(date '+%Y.%m.%d')" >> $GITHUB_ENV

    - name: Upload release assets
      uses: ncipollo/release-action@v1
      with:
        artifacts: "artifacts/xray-nginx-custom-*.tar.gz"
        tag: "${{ env.TAG_NAME }}"
        body: "Nginx ${{env.NGINX_VERSION}} custom build with additional modules, fully statically linked.\n\n\n\nOpenSSL Version: ${{env.OPENSSL_VERSION}}\nJemalloc Version: ${{env.JEMALLOC_VERSION}}\n\nBuild Date: ${{env.BUILD_TIME}}\nBuild Image: ${{env.BUILD_IMAGE}}"
        draft: false
        prerelease: false
        allowUpdates: true
